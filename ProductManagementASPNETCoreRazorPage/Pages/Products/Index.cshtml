    @page
    @model PRN222.Lab2.ProductManagementASPNETCoreRazorPage.Pages.Products.IndexModel

    @{
        ViewData["Title"] = "Products";
    }

    <h1>Products</h1>

    <form method="get">
        <div class="row mb-3">
            <div class="col-md-4">
                <input type="text" name="search" value="@Model.Search" placeholder="Search by product name" class="form-control" />
            </div>
            <div class="col-md-2">
                <select name="sortOrder" class="form-control">
                    <option value="" selected="@(Model.SortOrder == null)">Sort by</option>
                    <option value="name_asc" selected="@(Model.SortOrder == "name_asc")">Name Ascending</option>
                    <option value="name_desc" selected="@(Model.SortOrder == "name_desc")">Name Descending</option>
                    <option value="price_asc" selected="@(Model.SortOrder == "price_asc")">Price Low to High</option>
                    <option value="price_desc" selected="@(Model.SortOrder == "price_desc")">Price High to Low</option>
                </select>

            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </div>
    </form>

    <p>
        <a asp-page="Create" class="btn btn-success">Create New</a>
    </p>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.Product[0].ProductName)</th>
                <th>@Html.DisplayNameFor(model => model.Product[0].UnitsInStock)</th>
                <th>@Html.DisplayNameFor(model => model.Product[0].UnitPrice)</th>
                <th>@Html.DisplayNameFor(model => model.Product[0].Category.CategoryName)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Product)
            {
                <tr id="product-@item.ProductId">
                    <td>@item.ProductName</td>
                    <td>@item.UnitsInStock</td>
                    <td>@item.UnitPrice</td>
                    <td>@item.Category?.CategoryName</td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ProductId">Edit</a> |
                        <a asp-page="./Details" asp-route-id="@item.ProductId">Details</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ProductId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <nav>
            <ul class="pagination">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" href="?search=@Model.Search&sortOrder=@Model.SortOrder&page=@i">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.7/signalr.min.js"></script>
    <script type="text/javascript">
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/SignalRServer")
            .build();

        connection.on("ProductDeleted", function (productId) {
            const row = document.getElementById(`product-${productId}`);
            if (row) {
                row.remove();
            }
        });

        connection.on("ProductAdded", function (productId, productName, unitsInStock, unitPrice, categoryName) {
            const formattedPrice = parseFloat(unitPrice).toFixed(4); // Định dạng 4 chữ số thập phân
            const tableBody = document.querySelector("tbody");
            const newRow = document.createElement("tr");
            newRow.id = `product-${productId}`;
            newRow.innerHTML = `
                <td>${productName}</td>
                <td>${unitsInStock}</td>
                <td>${formattedPrice}</td>
                <td>${categoryName ?? "N/A"}</td>
                <td>
                    <a href="/Products/Edit?id=${productId}">Edit</a> |
                    <a href="/Products/Details?id=${productId}">Details</a> |
                    <a href="/Products/Delete?id=${productId}">Delete</a>
                </td>
            `;
            // Thêm vào đầu danh sách
            tableBody.prepend(newRow);  
            //// Thêm vào cuối bảng
            //tableBody.appendChild(newRow);
        });

        connection.on("ProductEdited", function (productId, productName, unitsInStock, unitPrice, categoryName) {
            const formattedPrice = parseFloat(unitPrice).toFixed(4); // Định dạng 4 chữ số thập phân
            const productRow = document.getElementById(`product-${productId}`);

            if (productRow) {
                productRow.innerHTML = `
            <td>${productName}</td>
            <td>${unitsInStock}</td>
            <td>${formattedPrice}</td>
            <td>${categoryName ?? "N/A"}</td>
            <td>
                <a href="/Products/Edit?id=${productId}">Edit</a> |
                <a href="/Products/Details?id=${productId}">Details</a> |
                <a href="/Products/Delete?id=${productId}">Delete</a>
            </td>
        `;
            }
        });

        connection.start().catch(function (err) {
            console.error(err.toString());
        });
    </script>
}
